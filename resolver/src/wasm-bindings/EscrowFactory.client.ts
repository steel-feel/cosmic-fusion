/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Addr, Uint128, EscrowInstantiateMsg, Timelocks, Coin, QueryMsg } from "./EscrowFactory.types";
export interface EscrowFactoryReadOnlyInterface {
  contractAddress: string;
}
export class EscrowFactoryQueryClient implements EscrowFactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
  }
}
export interface EscrowFactoryInterface extends EscrowFactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  deployEscrow: ({
    hashlock,
    maker,
    orderHash,
    rescueDelay,
    taker,
    timelocks,
    token
  }: {
    hashlock: string;
    maker: Addr;
    orderHash: string;
    rescueDelay: number;
    taker: Addr;
    timelocks: Timelocks;
    token: Coin;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class EscrowFactoryClient extends EscrowFactoryQueryClient implements EscrowFactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.deployEscrow = this.deployEscrow.bind(this);
  }
  deployEscrow = async ({
    hashlock,
    maker,
    orderHash,
    rescueDelay,
    taker,
    timelocks,
    token
  }: {
    hashlock: string;
    maker: Addr;
    orderHash: string;
    rescueDelay: number;
    taker: Addr;
    timelocks: Timelocks;
    token: Coin;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deploy_escrow: {
        hashlock,
        maker,
        order_hash: orderHash,
        rescue_delay: rescueDelay,
        taker,
        timelocks,
        token
      }
    }, fee_, memo_, funds_);
  };
}