/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Addr, Uint128, FillOrderMsg, AuctionParameters, GasCost, PricePoint, Immutables, Timelocks, Coin, TakerTraits, QueryMsg } from "./LimitOrderProtocol.types";
export interface LimitOrderProtocolReadOnlyInterface {
  contractAddress: string;
}
export class LimitOrderProtocolQueryClient implements LimitOrderProtocolReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
  }
}
export interface LimitOrderProtocolInterface extends LimitOrderProtocolReadOnlyInterface {
  contractAddress: string;
  sender: string;
  fillOrder: ({
    auctionParams,
    immutables,
    makingAmount,
    takerTraits,
    takingAmount
  }: {
    auctionParams: AuctionParameters;
    immutables: Immutables;
    makingAmount: Coin;
    takerTraits: TakerTraits;
    takingAmount: Coin;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class LimitOrderProtocolClient extends LimitOrderProtocolQueryClient implements LimitOrderProtocolInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.fillOrder = this.fillOrder.bind(this);
  }
  fillOrder = async ({
    auctionParams,
    immutables,
    makingAmount,
    takerTraits,
    takingAmount
  }: {
    auctionParams: AuctionParameters;
    immutables: Immutables;
    makingAmount: Coin;
    takerTraits: TakerTraits;
    takingAmount: Coin;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      fill_order: {
        auction_params: auctionParams,
        immutables,
        making_amount: makingAmount,
        taker_traits: takerTraits,
        taking_amount: takingAmount
      }
    }, fee_, memo_, funds_);
  };
}