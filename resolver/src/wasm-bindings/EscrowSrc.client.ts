/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Addr, Uint128, InstantiateMsg, Timelocks, Coin, ExecuteMsg, PullFundsMsg, WithdrawMsg, WithdrawToMsg, QueryMsg, GetOrderDetailsResponse } from "./EscrowSrc.types";
export interface EscrowSrcReadOnlyInterface {
  contractAddress: string;
  orderDetails: () => Promise<GetOrderDetailsResponse>;
}
export class EscrowSrcQueryClient implements EscrowSrcReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.orderDetails = this.orderDetails.bind(this);
  }
  orderDetails = async (): Promise<GetOrderDetailsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      order_details: {}
    });
  };
}
export interface EscrowSrcInterface extends EscrowSrcReadOnlyInterface {
  contractAddress: string;
  sender: string;
  pullFunds: ({
    amount,
    from
  }: {
    amount: Coin;
    from: Addr;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    secret
  }: {
    secret: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdrawTo: ({
    secret,
    tagret
  }: {
    secret: string;
    tagret: Addr;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  publicWithdraw: ({
    secret
  }: {
    secret: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  cancel: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  publicCancel: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class EscrowSrcClient extends EscrowSrcQueryClient implements EscrowSrcInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.pullFunds = this.pullFunds.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.withdrawTo = this.withdrawTo.bind(this);
    this.publicWithdraw = this.publicWithdraw.bind(this);
    this.cancel = this.cancel.bind(this);
    this.publicCancel = this.publicCancel.bind(this);
  }
  pullFunds = async ({
    amount,
    from
  }: {
    amount: Coin;
    from: Addr;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pull_funds: {
        amount,
        from
      }
    }, fee_, memo_, funds_);
  };
  withdraw = async ({
    secret
  }: {
    secret: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        secret
      }
    }, fee_, memo_, funds_);
  };
  withdrawTo = async ({
    secret,
    tagret
  }: {
    secret: string;
    tagret: Addr;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_to: {
        secret,
        tagret
      }
    }, fee_, memo_, funds_);
  };
  publicWithdraw = async ({
    secret
  }: {
    secret: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      public_withdraw: {
        secret
      }
    }, fee_, memo_, funds_);
  };
  cancel = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel: {}
    }, fee_, memo_, funds_);
  };
  publicCancel = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      public_cancel: {}
    }, fee_, memo_, funds_);
  };
}