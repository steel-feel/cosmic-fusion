/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.13.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Addr, Uint128, InstantiateMsg, Timelocks, Coin, ExecuteMsg, WithdrawMsg, QueryMsg } from "./EscrowDst.types";
export interface EscrowDstReadOnlyInterface {
  contractAddress: string;
}
export class EscrowDstQueryClient implements EscrowDstReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
  }
}
export interface EscrowDstInterface extends EscrowDstReadOnlyInterface {
  contractAddress: string;
  sender: string;
  withdraw: ({
    secret
  }: {
    secret: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  publicWithdraw: ({
    secret
  }: {
    secret: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class EscrowDstClient extends EscrowDstQueryClient implements EscrowDstInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.withdraw = this.withdraw.bind(this);
    this.publicWithdraw = this.publicWithdraw.bind(this);
  }
  withdraw = async ({
    secret
  }: {
    secret: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        secret
      }
    }, fee_, memo_, funds_);
  };
  publicWithdraw = async ({
    secret
  }: {
    secret: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      public_withdraw: {
        secret
      }
    }, fee_, memo_, funds_);
  };
}